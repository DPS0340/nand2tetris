// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:
    Not(in=zx, out=notzx);

    And(a=zx, b=notzx, out=false);
    Or(a=zx, b=notzx, out=true);

    Widen16(in=false, out=falsehex);
    Widen16(in=true, out=truehex);

    Widen16(in=zx, out=zxhex);
    Widen16(in=notzx, out=notzxhex);
    Not16(in=x, out=notx);

    And16(a=notzxhex, b=x, out=xtemp1);

    Widen16(in=nx, out=nxhex);

    Not16(in=nxhex, out=notnxhex);
    Not16(in=xtemp1, out=notxtemp1);
    And16(a=notnxhex, b=xtemp1, out=xtemp2);
    And16(a=nxhex, b=notxtemp1, out=xtemp3);
    Or16(a=xtemp2, b=xtemp3, out=xfin);

    Not(in=zy, out=notzy);
    Widen16(in=notzy, out=notzyhex);

    And16(a=notzyhex, b=y, out=ytemp1);
    
    Widen16(in=ny, out=nyhex);
    Not16(in=nyhex, out=notnyhex);
    Not16(in=ytemp1, out=notytemp1);
    And16(a=notnyhex, b=ytemp1, out=ytemp2);
    And16(a=nyhex, b=notytemp1, out=ytemp3);
    Or16(a=ytemp2, b=ytemp3, out=yfin);

    Not(in=f, out=notf);
    Widen16(in=f, out=fhex);
    Widen16(in=notf, out=notfhex);

    Add16(a=xfin, b=yfin, out=outadd);
    And16(a=xfin, b=yfin, out=outand);
    And16(a=fhex, b=outadd, out=outf);
    And16(a=notfhex, b=outand, out=outnotf);
    Or16(a=outf, b=outnotf, out=outtemp1);

    Not(in=no, out=notno);
    Widen16(in=no, out=nohex);
    Widen16(in=notno, out=notnohex);
    Not16(in=outtemp1, out=notouttemp1);

    And16(a=notnohex, b=outtemp1, out=outcand1);
    And16(a=nohex, b=notouttemp1, out=outcand2);
    Or16(a=outcand1, b=outcand2, out=outres);
    Or16(a=outres, b=falsehex, out=out);

    // equals
    Not16(in=outres, out=notout);
    Flattenand(a=notout, b=true, out=zr);
    get15(in=outres, out=ng);
}